#!/usr/bin/env python
# encoding: utf-8
'''
 -- 	Checks the FITS header for DATE-OBS, EXPTIME, and FILTER values, then
 renames FITS files to match the ESA/PSA and NASA/PDS archive fielname format

@author:     PJ Cabrera

@copyright:  Copyright 2015 PJ Cabrera - Licensed under the Apache License 2.0

@license:    http://www.apache.org/licenses/LICENSE-2.0

@contact:    pj.cabrera.REMOVE.THIS@gmail.com
@deffield    updated: Updated
'''

import sys
import os

from optparse import OptionParser

__all__ = []
__version__ = 0.1
__date__ = '2015-12-04'
__updated__ = '2015-12-04'

DEBUG = 0
TESTRUN = 0
PROFILE = 0

def main(argv=None):
    '''Command line options.'''
    
    program_name = os.path.basename(sys.argv[0])
    program_version = "v0.1"
    program_build_date = "%s" % __updated__
    program_version_string = '%%prog %s (%s)' % (program_version, program_build_date)
    
    program_usage = '''''' # optional - will be autogenerated by optparse
    program_longdesc = '''Checks the FITS header for DATE-OBS, EXPTIME, and FILTER values, then \n
    renames FITS files to match the ESA/PSA and NASA/PDS archive fielname format'''
    program_license = '''Copyright 2015 PJ Cabrera - Licensed under the Apache License 2.0 \n
    http://www.apache.org/licenses/LICENSE-2.0'''
    
    # setup option parser
    parser = OptionParser(version=program_version_string, epilog=program_longdesc, description=program_license)
    parser.add_option("", "--in", dest="inpath", help="set input path [default: %default]", metavar="PATH")
    parser.add_option("", "--out", dest="outpath", help="set output path [default: %default]", metavar="PATH")
    parser.add_option("-i", "--initials", dest="initials", help="set your initials [default: %default]", metavar="INITIALS")
    parser.add_option("-o", "--object", dest="obj", help="set the object name [default: %default]", metavar="OBJ")
    parser.add_option("-m", "--move", dest="movefiles", action="store_true", help="don't keep original files; rename & move files to outpath", default=False)
    
    # set defaults
    parser.set_defaults(outpath="./renamed/", inpath="./", obj="67P")    
    
    if len(argv) > 1:
        # process options
        (opts, args) = parser.parse_args(argv)
        
        try:
            if opts.initials:
                print("initials = %s" % opts.initials)
                opts.initials = "_%s" % opts.initials
            else:
                opts.initials = ""
            if opts.obj:
                print("obj = %s" % opts.obj)
            if opts.inpath:
                print("inpath = %s" % opts.inpath)
            if opts.outpath:
                print("outpath = %s" % opts.outpath)
            print("move files = %s" % opts.movefiles)
            
            import re, shutil
            from astropy.io import fits
            
            for file in os.listdir(opts.inpath):
                fits_count = 0
                if file.endswith(".fit") or file.endswith(".fits"):
                    try:
                        os.makedirs(opts.outpath)
                    except OSError:
                        if not os.path.isdir(opts.outpath):
                            raise
                    filepath = opts.inpath + os.sep + file
                    hdulist=fits.open(filepath)
                    fits_header = hdulist[0].header
                    obs_datetime = re.split('T', fits_header['DATE-OBS'])
                    obs_date = ''.join( list( reversed(re.split('-', obs_datetime[0])) ) )
                    obs_time = ''.join( re.split(':', obs_datetime[1]) )
                    exp_time = fits_header['EXPTIME']
                    filter = fits_header['FILTER'][0]
                    new_filename = "%s_%s_%s_%s%3.0f%s.fit" % (obs_date, obs_time, opts.obj, filter, exp_time, opts.initials)
                    print file, '->', new_filename
                    hdulist.close()
                    if opts.movefiles:
                        shutil.move(filepath, opts.outpath+new_filename)
                    else:
                        shutil.copy2(filepath, opts.outpath+new_filename)
                    fits_count = fits_count + 1
            
            if fits_count == 0:
                print "Didn't find FITS files to process"
                return 2
        except Exception, e:
            indent = len(program_name) * " "
            sys.stderr.write(program_name + ": " + repr(e) + "\n")
            sys.stderr.write(indent + "  for help use --help\n")
            return 2
    else:
        (opts, args) = parser.parse_args(["-h"])

if __name__ == "__main__":
    if DEBUG:
        sys.argv.append("-h")
    if TESTRUN:
        import astropy
        astropy.test()
    if PROFILE:
        import cProfile
        import pstats
        profile_filename = '_profile.txt'
        cProfile.run('main()', profile_filename)
        statsfile = open("profile_stats.txt", "wb")
        p = pstats.Stats(profile_filename, stream=statsfile)
        stats = p.strip_dirs().sort_stats('cumulative')
        stats.print_stats()
        statsfile.close()
        sys.exit(0)
    sys.exit(main(sys.argv))
